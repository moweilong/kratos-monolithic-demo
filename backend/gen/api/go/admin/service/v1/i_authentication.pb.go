// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: admin/service/v1/i_authentication.proto

package servicev1

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "kratos-monolithic-demo/gen/api/go/user/service/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 授权类型
type GrantType int32

const (
	GrantType_password           GrantType = 0 // 密码模式（Resource Owner Password Credentials Grant）
	GrantType_client_credentials GrantType = 1 // 客户端模式（Client Credentials Grant）
	GrantType_refresh_token      GrantType = 2 // 更新令牌
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "password",
		1: "client_credentials",
		2: "refresh_token",
	}
	GrantType_value = map[string]int32{
		"password":           0,
		"client_credentials": 1,
		"refresh_token":      2,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_service_v1_i_authentication_proto_enumTypes[0].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_admin_service_v1_i_authentication_proto_enumTypes[0]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{0}
}

// 令牌类型
type TokenType int32

const (
	TokenType_bearer TokenType = 0 //
	TokenType_mac    TokenType = 1 //
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0: "bearer",
		1: "mac",
	}
	TokenType_value = map[string]int32{
		"bearer": 0,
		"mac":    1,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_service_v1_i_authentication_proto_enumTypes[1].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_admin_service_v1_i_authentication_proto_enumTypes[1]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{1}
}

// 用户后台登出 - 请求
type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_service_v1_i_authentication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_authentication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{0}
}

func (x *LogoutRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 获取当前用户信息 - 请求
type GetMeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMeRequest) Reset() {
	*x = GetMeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_service_v1_i_authentication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeRequest) ProtoMessage() {}

func (x *GetMeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_authentication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeRequest.ProtoReflect.Descriptor instead.
func (*GetMeRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{1}
}

func (x *GetMeRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 用户后台登陆 - 请求
type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`     // 用户名，必选项。
	Password     string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`     // 用户的密码，必选项。
	GrantType    string  `protobuf:"bytes,3,opt,name=grant_type,proto3" json:"grant_type,omitempty"` // 授权类型，此处的值固定为"password"，必选项。
	Scope        *string `protobuf:"bytes,4,opt,name=scope,proto3,oneof" json:"scope,omitempty"`     // 以空格分隔的范围列表。如果未提供，scope则授权任何范围，默认为空列表。
	ClientId     *string `protobuf:"bytes,5,opt,name=client_id,proto3,oneof" json:"client_id,omitempty"`
	ClientSecret *string `protobuf:"bytes,6,opt,name=client_secret,proto3,oneof" json:"client_secret,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_service_v1_i_authentication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_authentication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetGrantType() string {
	if x != nil {
		return x.GrantType
	}
	return ""
}

func (x *LoginRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *LoginRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *LoginRequest) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

// 用户后台登陆 - 回应
type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string  `protobuf:"bytes,1,opt,name=access_token,proto3" json:"access_token,omitempty"`    // 访问令牌，必选项。
	RefreshToken string  `protobuf:"bytes,2,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`  // 更新令牌，用来获取下一次的访问令牌，可选项。
	TokenType    string  `protobuf:"bytes,3,opt,name=token_type,proto3" json:"token_type,omitempty"`        // 令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。
	ExpiresIn    *int64  `protobuf:"varint,4,opt,name=expires_in,proto3,oneof" json:"expires_in,omitempty"` // 令牌有效时间，单位为秒。如果访问令牌过期，服务器应回复授予访问令牌的持续时间。如果省略该参数，必须其他方式设置过期时间。
	Scope        *string `protobuf:"bytes,5,opt,name=scope,proto3,oneof" json:"scope,omitempty"`            // 以空格分隔的用户授予范围列表。如果未提供，scope则授权任何范围，默认为空列表。
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_service_v1_i_authentication_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_authentication_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{3}
}

func (x *LoginResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *LoginResponse) GetExpiresIn() int64 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

func (x *LoginResponse) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

// 用户刷新令牌 - 请求
type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string  `protobuf:"bytes,1,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"` // 更新令牌，用来获取下一次的访问令牌，必选项。
	GrantType    string  `protobuf:"bytes,2,opt,name=grant_type,proto3" json:"grant_type,omitempty"`       // 授权类型，此处的值固定为"refresh_token"，必选项。
	Scope        *string `protobuf:"bytes,3,opt,name=scope,proto3,oneof" json:"scope,omitempty"`           // 以空格分隔的范围列表。如果未提供，scope则授权任何范围，默认为空列表。
	ClientId     *string `protobuf:"bytes,5,opt,name=client_id,proto3,oneof" json:"client_id,omitempty"`
	ClientSecret *string `protobuf:"bytes,6,opt,name=client_secret,proto3,oneof" json:"client_secret,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_service_v1_i_authentication_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_authentication_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{4}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshTokenRequest) GetGrantType() string {
	if x != nil {
		return x.GrantType
	}
	return ""
}

func (x *RefreshTokenRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *RefreshTokenRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *RefreshTokenRequest) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

// 用户刷新令牌 - 回应
type RefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"` // 更新令牌，用来获取下一次的访问令牌，可选项。
	GrantType    string `protobuf:"bytes,2,opt,name=grant_type,proto3" json:"grant_type,omitempty"`       // 授权类型，此处的值固定为"password"，必选项。
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_service_v1_i_authentication_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_service_v1_i_authentication_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_admin_service_v1_i_authentication_proto_rawDescGZIP(), []int{5}
}

func (x *RefreshTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshTokenResponse) GetGrantType() string {
	if x != nil {
		return x.GrantType
	}
	return ""
}

var File_admin_service_v1_i_authentication_proto protoreflect.FileDescriptor

var file_admin_service_v1_i_authentication_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x0d, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x73, 0x0a,
	0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x53, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x4d, 0x8a, 0x02, 0x0a, 0x1a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x92, 0x02, 0x3d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe5, 0xa4, 0x84, 0xe7, 0x9a,
	0x84, 0xe5, 0x80, 0xbc, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0x22, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0x80, 0x89,
	0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x1a, 0x92, 0x02, 0x17,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe7, 0x9a, 0x84, 0xe8,
	0xaf, 0x86, 0xe5, 0x88, 0xab, 0x49, 0x44, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xe0, 0x41, 0x01, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7,
	0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe7, 0x9a, 0x84, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x48, 0x02,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x9d, 0x08, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x4e, 0x92, 0x02, 0x4b, 0xe8,
	0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe7,
	0x9a, 0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe3, 0x80, 0x82, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xc0, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x99, 0x02, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x92, 0x02, 0x92, 0x02, 0x8e, 0x02, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8,
	0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8, 0x80, 0xe6,
	0xac, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82,
	0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7,
	0x89, 0x8c, 0xe5, 0xb0, 0x86, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe5, 0xbe, 0x88, 0xe6, 0x9c, 0x89, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5,
	0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0x8f, 0xa6, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb,
	0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xef, 0xbc, 0x8c,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe9, 0x9a, 0x90, 0xe5, 0xbc, 0x8f, 0xe6, 0x8e, 0x88, 0xe4,
	0xba, 0x88, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0xb7,
	0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0x52, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x94, 0x01, 0xba, 0x47, 0x90, 0x01, 0x8a, 0x02, 0x08, 0x1a, 0x06, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x92, 0x02, 0x81, 0x01, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe7, 0x9a, 0x84, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe5, 0x80, 0xbc, 0xe5, 0xa4,
	0xa7, 0xe5, 0xb0, 0x8f, 0xe5, 0x86, 0x99, 0xe4, 0xb8, 0x8d, 0xe6, 0x95, 0x8f, 0xe6, 0x84, 0x9f,
	0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xef, 0xbc, 0x8c, 0xe5,
	0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x98, 0xaf, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0x88, 0x96, 0x6d, 0x61, 0x63, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x9a, 0xe5, 0xb8, 0xb8, 0xe5, 0x8f, 0xaa, 0xe6, 0x98, 0xaf, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe2, 0x80, 0x9c, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0xe2, 0x80, 0x9d, 0xe3, 0x80, 0x82, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0xe5, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0xbf, 0x01, 0xe0, 0x41, 0x01, 0xba, 0x47,
	0xb8, 0x01, 0x92, 0x02, 0xb4, 0x01, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x9c, 0x89, 0xe6,
	0x95, 0x88, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa7, 0x92, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe8, 0xbf, 0x87, 0xe6,
	0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe5, 0xba,
	0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe8, 0xae, 0xbf,
	0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe7, 0x9a, 0x84, 0xe6, 0x8c, 0x81, 0xe7,
	0xbb, 0xad, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e,
	0x9c, 0xe7, 0x9c, 0x81, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6,
	0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe8, 0xbf, 0x87, 0xe6, 0x9c,
	0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe3, 0x80, 0x82, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0xe0, 0x41, 0x01,
	0xba, 0x47, 0x74, 0x92, 0x02, 0x71, 0xe4, 0xbb, 0xa5, 0xe7, 0xa9, 0xba, 0xe6, 0xa0, 0xbc, 0xe5,
	0x88, 0x86, 0xe9, 0x9a, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e,
	0x88, 0xe4, 0xba, 0x88, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4,
	0xbe, 0x9b, 0xef, 0xbc, 0x8c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0xe5, 0x88, 0x99, 0xe6, 0x8e, 0x88,
	0xe6, 0x9d, 0x83, 0xe4, 0xbb, 0xbb, 0xe4, 0xbd, 0x95, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef,
	0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe3, 0x80, 0x82, 0x48, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xa9, 0x06, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0xc0, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x99, 0x02, 0xe0,
	0x41, 0x02, 0xba, 0x47, 0x92, 0x02, 0x92, 0x02, 0x8e, 0x02, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0xa5, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe7, 0x9a,
	0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c,
	0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe5, 0xb0,
	0x86, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe5,
	0xbe, 0x88, 0xe6, 0x9c, 0x89, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7,
	0x89, 0x8c, 0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8f, 0xa6, 0xe4, 0xb8,
	0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c,
	0xe3, 0x80, 0x82, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe9, 0x9a, 0x90, 0xe5, 0xbc, 0x8f, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe9, 0xa2,
	0x81, 0xe5, 0x8f, 0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4,
	0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x7d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xe0, 0x41, 0x02,
	0xba, 0x47, 0x57, 0x8a, 0x02, 0x0f, 0x1a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x92, 0x02, 0x42, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe5, 0xa4, 0x84, 0xe7, 0x9a, 0x84,
	0xe5, 0x80, 0xbc, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0x22, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7a, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x74, 0x92, 0x02,
	0x71, 0xe4, 0xbb, 0xa5, 0xe7, 0xa9, 0xba, 0xe6, 0xa0, 0xbc, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94,
	0xe7, 0x9a, 0x84, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe3, 0x80, 0x82, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xef, 0xbc, 0x8c,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0xe5, 0x88, 0x99, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbb,
	0xbb, 0xe4, 0xbd, 0x95, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe3,
	0x80, 0x82, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x1a, 0x92, 0x02, 0x17, 0xe5, 0xba, 0x94, 0xe7,
	0x94, 0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0x8f, 0xe7, 0x9a, 0x84, 0xe8, 0xaf, 0x86, 0xe5, 0x88,
	0xab, 0x49, 0x44, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x01, 0xba,
	0x47, 0x18, 0x92, 0x02, 0x15, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xa8, 0x8b, 0xe5, 0xba,
	0x8f, 0xe7, 0x9a, 0x84, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xd8, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xc0, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x99, 0x02, 0xe0, 0x41, 0x02, 0xba,
	0x47, 0x92, 0x02, 0x92, 0x02, 0x8e, 0x02, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe6, 0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe4, 0xb8, 0x8b, 0xe4, 0xb8, 0x80, 0xe6, 0xac, 0xa1, 0xe7, 0x9a, 0x84, 0xe8, 0xae,
	0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf,
	0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8,
	0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe5, 0xb0, 0x86, 0xe8, 0xbf,
	0x87, 0xe6, 0x9c, 0x9f, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe5, 0xbe, 0x88, 0xe6,
	0x9c, 0x89, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe7, 0xa8,
	0x8b, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe8, 0xaf, 0xa5, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6,
	0x9d, 0xa5, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8f, 0xa6, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,
	0xaa, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe3, 0x80, 0x82,
	0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe9,
	0x9a, 0x90, 0xe5, 0xbc, 0x8f, 0xe6, 0x8e, 0x88, 0xe4, 0xba, 0x88, 0xe9, 0xa2, 0x81, 0xe5, 0x8f,
	0x91, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe9, 0xa2, 0x81, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7,
	0x89, 0x8c, 0xe3, 0x80, 0x82, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x7d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xe0, 0x41, 0x02, 0xba, 0x47, 0x57,
	0x8a, 0x02, 0x0f, 0x1a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x92, 0x02, 0x42, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0xad, 0xa4, 0xe5, 0xa4, 0x84, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc,
	0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe4, 0xb8, 0xba, 0x22, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe9, 0x80,
	0x89, 0xe9, 0xa1, 0xb9, 0xe3, 0x80, 0x82, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2a, 0x44, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x10, 0x01, 0x32, 0xb4, 0x03, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0xba, 0x47, 0x02, 0x5a, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22,
	0x0f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x5e, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x7a, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x05,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x14, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x42, 0xcc, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x49, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x6d, 0x6f, 0x6e, 0x6f,
	0x6c, 0x69, 0x74, 0x68, 0x69, 0x63, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_service_v1_i_authentication_proto_rawDescOnce sync.Once
	file_admin_service_v1_i_authentication_proto_rawDescData = file_admin_service_v1_i_authentication_proto_rawDesc
)

func file_admin_service_v1_i_authentication_proto_rawDescGZIP() []byte {
	file_admin_service_v1_i_authentication_proto_rawDescOnce.Do(func() {
		file_admin_service_v1_i_authentication_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_service_v1_i_authentication_proto_rawDescData)
	})
	return file_admin_service_v1_i_authentication_proto_rawDescData
}

var file_admin_service_v1_i_authentication_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_admin_service_v1_i_authentication_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_admin_service_v1_i_authentication_proto_goTypes = []interface{}{
	(GrantType)(0),               // 0: admin.service.v1.GrantType
	(TokenType)(0),               // 1: admin.service.v1.TokenType
	(*LogoutRequest)(nil),        // 2: admin.service.v1.LogoutRequest
	(*GetMeRequest)(nil),         // 3: admin.service.v1.GetMeRequest
	(*LoginRequest)(nil),         // 4: admin.service.v1.LoginRequest
	(*LoginResponse)(nil),        // 5: admin.service.v1.LoginResponse
	(*RefreshTokenRequest)(nil),  // 6: admin.service.v1.RefreshTokenRequest
	(*RefreshTokenResponse)(nil), // 7: admin.service.v1.RefreshTokenResponse
	(*emptypb.Empty)(nil),        // 8: google.protobuf.Empty
	(*v1.User)(nil),              // 9: user.service.v1.User
}
var file_admin_service_v1_i_authentication_proto_depIdxs = []int32{
	4, // 0: admin.service.v1.AuthenticationService.Login:input_type -> admin.service.v1.LoginRequest
	2, // 1: admin.service.v1.AuthenticationService.Logout:input_type -> admin.service.v1.LogoutRequest
	6, // 2: admin.service.v1.AuthenticationService.RefreshToken:input_type -> admin.service.v1.RefreshTokenRequest
	3, // 3: admin.service.v1.AuthenticationService.GetMe:input_type -> admin.service.v1.GetMeRequest
	5, // 4: admin.service.v1.AuthenticationService.Login:output_type -> admin.service.v1.LoginResponse
	8, // 5: admin.service.v1.AuthenticationService.Logout:output_type -> google.protobuf.Empty
	5, // 6: admin.service.v1.AuthenticationService.RefreshToken:output_type -> admin.service.v1.LoginResponse
	9, // 7: admin.service.v1.AuthenticationService.GetMe:output_type -> user.service.v1.User
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_admin_service_v1_i_authentication_proto_init() }
func file_admin_service_v1_i_authentication_proto_init() {
	if File_admin_service_v1_i_authentication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_service_v1_i_authentication_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_service_v1_i_authentication_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_service_v1_i_authentication_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_service_v1_i_authentication_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_service_v1_i_authentication_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_service_v1_i_authentication_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_admin_service_v1_i_authentication_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_admin_service_v1_i_authentication_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_admin_service_v1_i_authentication_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_service_v1_i_authentication_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_service_v1_i_authentication_proto_goTypes,
		DependencyIndexes: file_admin_service_v1_i_authentication_proto_depIdxs,
		EnumInfos:         file_admin_service_v1_i_authentication_proto_enumTypes,
		MessageInfos:      file_admin_service_v1_i_authentication_proto_msgTypes,
	}.Build()
	File_admin_service_v1_i_authentication_proto = out.File
	file_admin_service_v1_i_authentication_proto_rawDesc = nil
	file_admin_service_v1_i_authentication_proto_goTypes = nil
	file_admin_service_v1_i_authentication_proto_depIdxs = nil
}
